package com.mauro.utilitario.util;

/**
 * Clase con metodos complementarios para manejo de Strings
 * 
 * @see java.lang.String
 * @author Mauro Fernandez
 * @since 1.0
 *
 */
public class StringUtil {
	/**
	 * 
	 * retorna una cadena con el primer caracter en mayuscula y los demas
	 * caracteres en minuscula. <br>
	 * Ejemplo: StringUtil.capitalize("juan") returns "Juan"
	 * 
	 * @since 1.0
	 * @param source:
	 *            cadena que se le aplicara el capitalize
	 * @return cadena que se le aplico capitalize
	 */
	public static String capitalize(String source) {
		String primerCaracter = source.substring(0, 1);
		String demasCaracteres = source.substring(1);
		primerCaracter = primerCaracter.toUpperCase();
		demasCaracteres = demasCaracteres.toLowerCase();
		return primerCaracter + demasCaracteres;
	}

	/**
	 * Trunca una cadena a un maximo de caracteres
	 * 
	 * @since 1.1
	 * @param cadena:
	 *            cadena a truncar
	 * @param numcaracteres:
	 *            numero maximo de caracteres de la nueva cadena
	 * @return cadena truncada
	 */
	public static String truncate(String cadena, int numcaracteres) {

		if (cadena.length() <= numcaracteres) {
			return cadena;
		}
		return cadena.substring(0, numcaracteres);
	}

	/**
	 * Multiplica la cadena ingresada por parametro n veces
	 * 
	 * @since 1.2
	 * @param cadena:
	 *            cadena fuente
	 * @param times:
	 *            numero de veces a repetir
	 * @return: cadena repetida "n veces"
	 */
	public static String times(String cadena, int times) {
		String cadenaTimes = "";

		for (int i = 0; i < times; i++) {

			cadenaTimes += cadena;
		}

		return cadenaTimes;
	}

	/**
	 * Invierte la cadena
	 * 
	 * @since 1.2
	 * @param cadena:
	 *            cadena a invertir
	 * @return retorna la cadena invertida
	 */
	public static String reverse(String cadena) {

		String cadenaReverse = "";

		for (int i = cadena.length() - 1; i >= 0; i--) {
			cadenaReverse += cadena.charAt(i);

		}
		return cadenaReverse;
	}

	/**
	 * Recibe una cadena como parametro y le aplica capitalize a cada palabra
	 * que tenga esa cadena. Una palabra es cada conjunto de caracteres
	 * separados por espacio.
	 * 
	 * Example: StringUtil.capitalizeAllWords("hola mundo") -> "Hola Mundo"
	 * StringUtil.capitalizeAllWords("java wOrld") -> "Java World"
	 * 
	 * @since 1.2
	 * @param cadena:
	 *            cadena de entrada
	 * @return String con palabras internas aplicadas capitaliza
	 */
	public static String capitalizeAllWords(String cadena) {
		boolean esInicioDePalabra = true;
		String resultado = "";
		for (int i = 0; i < cadena.length(); i++) {
			char caracterActual = cadena.charAt(i);
			
			char caracterTransformado;
			if(esInicioDePalabra) {
				caracterTransformado = Character.toUpperCase(caracterActual);
			} else {
				caracterTransformado = Character.toLowerCase(caracterActual);
			}
			
			boolean esEspacioEnBlanco = Character.isWhitespace(caracterActual);
			if(esEspacioEnBlanco) {
				esInicioDePalabra = true;
			} else {
				esInicioDePalabra = false;
			}
		}

		return resultado;
	}

	public static void main(String[] args) {

		System.out.println("'" + StringUtil.capitalizeAllWords("hola mundo") + "'");
		System.out.println("'" + StringUtil.capitalizeAllWords(" java wOrld") + "'");

	}

}
